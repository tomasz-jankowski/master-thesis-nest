extends ../../base

append head-files
    link(rel='stylesheet' href='/css/leaflet.css')
    link(rel='stylesheet' href='/css/dataTables.bootstrap4.min.css')
    link(rel='stylesheet' href='/css/buttons.bootstrap4.min.css')
    link(rel='stylesheet' href='/css/fixedColumns.bootstrap4.min.css')
    link(rel='stylesheet' href='/css/responsive.bootstrap4.min.css')
    link(rel='stylesheet' href='/css/searchBuilder.bootstrap4.min.css')
    link(rel='stylesheet' href='/css/searchBuilder.dataTables.min.css')
    link(rel='stylesheet' href='/css/dataTables.dateTime.min.css')
    link(rel='stylesheet' href='/css/select.dataTables.min.css')

prepend config
  - var routePage = true;

append content
    section.content
        .container-fluid
            h5 ID stacji:
                span.ml-1= station.id
            h5 Numer stacji:
                span.ml-1= station.number
            if station.uniqueName
                h5 Nazwa stacji:
                    span.ml-1= station.uniqueName
            if station.measurements.length === 0
              h5.text-danger Brak pomiarów do wyświetlenia.
            else
                h5 Liczba serii pomiarowych:
                    span.ml-1= [...new Set(station.measurements.map(item => item.series))].length
                h5 Liczba pomiarów:
                    span.ml-1= station.measurements.length
                .row
                    .col.card.bg-light
                        .card-header
                            h5 Wybierz serię pomiarową
                        .card-body
                            #table-wrapper
                                table.table.text-nowrap.text-center.table-striped
                                    thead
                                        tr
                                            th Seria pomiarowa
                                            th Numer serii pomiarowej
                                            th Data serii pomiarowej
                                            th Akcja
                                    tbody
                                        - var series = [...new Set(station.measurements.map(item => `${item.series} (${item.date.toLocaleDateString()})`))];
                                        each s in series
                                          tr
                                            td= s
                                            td= s.split(' ')[0]
                                            td= s.split(' ')[1].replace(/[\(\)]/g, '')
                                            td
                                                if s.split(' ')[1].replace(/[\(\)]/g, '').split('.')[0].length === 1
                                                    a.btn.btn-dark(href=`/route/${station.id}/series?series=${s.split(' ')[0]}+%280${s.split(' ')[1].replace(/[\(\)]/g, '')}%29`)
                                                        | Pokaż
                                                else
                                                    a.btn.btn-dark(href=`/route/${station.id}/series?series=${s.split(' ')[0]}+%28${s.split(' ')[1].replace(/[\(\)]/g, '')}%29`)
                                                        | Pokaż

                if chosenSeries
                    .row
                        .col.card.bg-light
                            .card-header
                                h5 Seria pomiarowa
                                    span.text-primary= ` ${chosenSeries[0].series} (${chosenSeries[0].date.toLocaleDateString()})`
                            .card-body
                                .map_box#mapid
                                    //.leaflet-bottom.leaflet-right.mr-5.mb-5
                                        button test1
                                        button test2
                                        button test3

append body-files
    script(src='/js/moment-with-locales.js')
    script(src='/js/jquery.dataTables.min.js')
    script(src='/js/dataTables.bootstrap4.min.js')
    script(src='/js/dataTables.fixedColumns.min.js')
    script(src='/js/dataTables.responsive.min.js')
    script(src='/js/responsive.bootstrap4.min.js')
    script(src='/js/dataTables.searchBuilder.min.js')
    script(src='/js/searchBuilder.bootstrap4.min.js')
    script(src='/js/leaflet.js')
    script(src='/js/leaflet-timeline-slider.min.js')
    script(src='/js/dataTables.dateTime.min.js')
    script(src='/js/datetime-moment.js')
    script.
      $(document).ready(function() {
        // TABLE
        $.fn.dataTable.moment('DD.MM.YYYY');

        const options = {
          dom: 'Qlfrtip',
          language: {
            url: '/js/pl.json'
          },
          aLengthMenu: [
            [5, 10, 15, 20, 50, 100, -1],
            [5, 10, 15, 20, 50, 100, '∞'],
          ]
        };

        const table = $('table').DataTable({
          ...options,
        });

        $('table tbody').on('click', 'button.show', function() {
          const data = table.row($(this).parents('tr')).data();
          window.location.href = `/route/${data.id}/series?series=${d.arr[0]}+%28${d.arr[1]}%29`;
        });

        // MAP
        let data = JSON.parse('!{JSON.stringify(chosenSeries)}');

        if (data) {

          let features = [];
          let timelineItems = [];

          data.forEach((d, idx) => {
            features.push({
              'type': 'Feature',
              'properties': {
                'title': `${++idx}`,
                'content': ` \
                  ID ${d.id} <br><br> \
                  <b class="text-info">Numer pomiaru:</b> ${d.number} <br> \
                  <b class="text-info">Data pomiaru:</b> ${new Date(d.date).toLocaleString()} <br> \
                  <b class="text-info">Długość geogr.:</b> ${d.latitude} <br> \
                  <b class="text-info">Szerokość geogr.:</b> ${d.longitude} <br> \
                  <b class="text-info">Wys. bezwzględna:</b> ${d.altitude} <br> \
                  <b class="text-info">Temperatura:</b> ${d.temperature} ℃ <br> \
                  <b class="text-info">Wilgotność:</b> ${d.humidity} % <br> \
                  <b class="text-info">PM1:</b> ${d.pm1} µg/m3 <br> \
                  <b class="text-info">PM2,5:</b> ${d.pm25} µg / m3 <br> \
                  <b class="text-info">PM10:</b> ${d.pm10} µg/m3 <br> \
                  <b class="text-info">L. dz. cz. > 0,3 µm/0,1 l:</b> ${d.quantity03} <br> \
                  <b class="text-info">L. dz. cz. > 0,5 µm/0,1 l:</b> ${d.quantity05} <br> \
                  <b class="text-info">L. dz. cz. > 1 µm/0,1 l:</b> ${d.quantity1} <br> \
                  <b class="text-info">L. dz. cz. > 2,5 µm/0,1 l:</b> ${d.quantity25} <br> \
                  <b class="text-info">L. dz. cz. > 5 µm/0,1 l:</b> ${d.quantity5} <br> \
                  <b class="text-info">L. dz. cz. > 10 µm/0,1 l:</b> ${d.quantity10} <br> \
                  <b class="text-info">L. cz. CO2:</b> ${d.quantityCO2} ppm <br> \
                  <b class="text-info">L. cz. TVOC:</b> ${d.quantityTVOC} ppb \
                  `
              },
              'geometry': {
                'type': 'Point',
                'coordinates': [
                  d.longitude,
                  d.latitude
                ]
              }
            });

            timelineItems.push(idx);
          });

          let collection = {
            'type': 'FeatureCollection',
            'features': features
          };


          let mymap = L.map('mapid')

          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          }).addTo(mymap);

          getDataAddMarkers = function({ label, value, map, exclamation }) {
            map.eachLayer(function(layer) {
              if (layer instanceof L.Marker) {
                map.removeLayer(layer);
              }
            });

            filteredData = collection.features.filter(function(i, n) {
              return i.properties.title === label;
            });

            var markerArray = [];
            L.geoJson(filteredData, {
              onEachFeature: function onEachFeature(feature, layer) {
                content = `${exclamation}: ${feature.properties.content} <br><br> (${value}. z ${collection.features.length} pomiarów w serii)`
                var popup = L.popup().setContent(content);
                layer.bindPopup(popup);
                markerArray.push(layer);
              }
            }).addTo(map);

            var markerGroup = L.featureGroup(markerArray);
            map.fitBounds(markerGroup.getBounds());
          };

          let width = document.getElementById('mapid').offsetWidth / timelineItems.length;
          width *= 0.925;
          width += 'px';

          L.control.timelineSlider({
            timelineItems,
            changeMap: getDataAddMarkers,
            extraChangeMapParams: { exclamation: 'Szczegóły pomiaru' },
            labelWidth: width,
          })
            .addTo(mymap);
        }
      });