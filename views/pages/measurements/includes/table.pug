append head-files
  link(rel='stylesheet' href='/css/handsontable.full.min.css')
  link(rel='stylesheet' href='/css/pikaday.css')

.row
    .col-md-12
        .card
            .card-header.border-0
                h3.card-title
                    i.fas.fa-border-all.mr-1
                    | Tabela z danymi
            .card-body
                button.btn.btn-primary.mb-3#file Pobierz dane
                #container

append body-files
    script(src='/js/handsontable.full.min.js')
    script(src='/js/pl-PL.js')
    script(src='/js/moment-with-locales.js')
    script(src='/js/pikaday.js')
    script.
      const debounceFn = Handsontable.helper.debounce((colIndex, event) => {
        const filtersPlugin = hot.getPlugin('filters');

        filtersPlugin.removeConditions(colIndex);
        filtersPlugin.addCondition(colIndex, 'contains', [event.target.value]);
        filtersPlugin.filter();
      }, 100);

      const addEventListeners = (input, colIndex) => {
        input.addEventListener('keydown', event => {
          debounceFn(colIndex, event);
        });
      };

      // Build elements which will be displayed in header.
      const getInitializedElements = colIndex => {
        const div = document.createElement('div');
        const input = document.createElement('input');

        div.className = 'filterHeader';

        addEventListeners(input, colIndex);

        div.appendChild(input);

        return div;
      };

      // Add elements to header on `afterGetColHeader` hook.
      const addInput = (col, TH) => {
        // Hooks can return a value other than number (for example `columnSorting` plugin uses this).
        if (typeof col !== 'number') {
          return col;
        }

        if (col >= 0 && TH.childElementCount < 2) {
          TH.appendChild(getInitializedElements(col));
        }
      };

      const data = JSON.parse('!{JSON.stringify(measurements)}');
      for (let obj of data) {
        if(obj.station.uniqueName)
          obj['stationCol'] = `${obj.station.id} (${obj.station.uniqueName})`;
        else
          obj['stationCol'] = obj.station.id;

        const date = new Date(obj['date']).toLocaleDateString();
        const time = new Date(obj['date']).toLocaleTimeString();
        obj['date'] = date;
        obj['time'] = time;

        const pump = obj['pump'];
        obj['pump'] = (pump) ? 'tak' : 'nie';

        obj['delete'] = `<div class='d-flex justify-content-center'><a class='btn btn-sm btn-outline-warning mr-2' onclick='editMeasurement(${obj['id']});return false;'>Edytuj</a><a class='btn btn-sm btn-outline-danger ml-2' onclick='deleteMeasurement(${obj['id']});return false;'>Usuń</a></div>`;
      }
      const container = document.getElementById('container');
      const hot = new Handsontable(container, {
        language: 'pl-PL',
        data,
        colHeaders: [
          'Operacja',
          'ID',
          'Stacja pomiarowa',
          'Seria',
          'Numer',
          'Data',
          'Czas',
          'Szerokość geograficzna',
          'Długość geograficzna',
          'Wysokość bezwględna',
          'Napięcie baterii [dV]',
          'Pompa',
          'PM1 [µg/m3]',
          'PM2.5 [µg/m3]',
          'PM10 [µg/m3]',
          'L. dz. cz. > 0,3 µm/0,1 l',
          'L. dz. cz. > 0,5 µm/0,1 l',
          'L. dz. cz. > 1 µm/0,1 l',
          'L. dz. cz. > 2,5 µm/0,1 l',
          'L. dz. cz. > 5 µm/0,1 l',
          'L. dz. cz. > 10 µm/0,1 l',
          'HCHO [mg/m3]',
          'Temperatura [d℃]',
          'Wilgotność [‰]',
          'Napięcie',
          'L. cz. CO2 [ppm]',
          'L. cz. TVOC [ppb]',
          'L. cz. TVOC [ppb]',
        ],
        height: 650,
        width: 'auto',
        columns: [
          { data: 'delete', renderer: 'html', readOnly: true },
          { data: 'id', readOnly: true, type: 'numeric' },
          { data: 'stationCol', readOnly: true },
          { data: 'series', readOnly: true, type: 'numeric' },
          { data: 'number', readOnly: true, type: 'numeric' },
          { data: 'date', readOnly: true, type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true, datePickerConfig: {
              firstDay: 1,
              showWeekNumber: true,
              numberOfMonths: 3,
              licenseKey: 'non-commercial-and-evaluation',
            }
          },
          { data: 'time', readOnly: true, type: 'time', timeFormat: 'hh:mm:ss' },
          { data: 'latitude', readOnly: true, type: 'numeric' },
          { data: 'longitude', readOnly: true, type: 'numeric' },
          { data: 'altitude', readOnly: true, type: 'numeric' },
          { data: 'batteryVoltage', readOnly: true, type: 'numeric' },
          { data: 'pump', readOnly: true },
          { data: 'pm1', readOnly: true, type: 'numeric' },
          { data: 'pm25', readOnly: true, type: 'numeric' },
          { data: 'pm10', readOnly: true, type: 'numeric' },
          { data: 'quantity03', readOnly: true, type: 'numeric'  },
          { data: 'quantity05', readOnly: true, type: 'numeric'  },
          { data: 'quantity1', readOnly: true, type: 'numeric'  },
          { data: 'quantity25', readOnly: true, type: 'numeric'  },
          { data: 'quantity5', readOnly: true, type: 'numeric'  },
          { data: 'quantity10', readOnly: true, type: 'numeric'  },
          { data: 'hcho', readOnly: true, type: 'numeric'  },
          { data: 'temperature', readOnly: true, type: 'numeric'  },
          { data: 'humidity', readOnly: true, type: 'numeric'  },
          { data: 'quantityCO2', readOnly: true, type: 'numeric'  },
          { data: 'quantityTVOC', readOnly: true, type: 'numeric'  },
          { data: 'quantityTVOC', readOnly: true, type: 'numeric'  },
        ],
        dropdownMenu: ['filter_by_condition', 'filter_action_bar'],
        // dropdownMenu: true,
        columnSorting: true,
        filters: true,
        afterGetColHeader: addInput,
        beforeOnCellMouseDown(event, coords) {
          // Deselect the column after clicking on input.
          if (coords.row === -1 && event.target.nodeName === 'INPUT') {
            event.stopImmediatePropagation();
            this.deselectCell();
          }
        },
        licenseKey: 'non-commercial-and-evaluation'
      });


      const fileDownload = document.getElementById('file');
      const exportPlugin = hot.getPlugin('exportFile');

      fileDownload.addEventListener('click', () => {
        exportPlugin.downloadFile('csv', {
          filename: 'Dane pomiarowe',
          columnHeaders: true,
          rowHeaders: true,
          columnDelimiter: ',',
        });
      });

      function deleteMeasurement(id) {
        alert(id);
      }

      function editMeasurement(id) {
        alert(id);
      }